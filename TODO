- Добавить формат заголовка
    + Ethernet
        + IP
            + TCP
            + UDP
            + ICMP
- Вывод всех полей заголовков в принтабельном формате:
    - Ethernet
    - IP
    - TCP
    - UDP
    - ICMP
- Завершение захвата из другого потока
- Сохранение в файл

class BaseTransport{
    virtual void deserializeHeader(const u_char *bytes, int offset){
    }

    virtual bool isHeaderEmpty(){
    }

    virtual List<string> getHeaderData(){
    }
}

class Tcp : BaseTransport{
private:
    struct TcpHeader{
        // fields
    }
    TcpHeader tcpHeader;
public:
    void deserializeHeader(const u_char *bytes, int offset) override {
        // Заполняем переменную tcpHeader
    }

    bool isHeaderEmpty() override {
        if(tcpHeader.tcp_len < 20)
            return true;
        else
            return false;
    }

    List<string> getHeaderData() override {
        // Составляем List<string> из полей переменной tcpHeader
    }
}

// Если заголовок поврежден / не получилось захватить часть / неизвестен
class EmptyTransport : BaseTransport{
public:
    void deserializeHeader(const u_char *bytes, int offset) override {
        // Ничего не делаем
    }

    bool isHeaderEmpty() override {
        return false;
    }

    List<string> getHeaderData() override{
        List<string> s;
        s.push_back("No data available");
        return s;
    }
}

class Factory{
    static BaseTransport* makeTransport(int protocol){
        BaseTransport *transport;
        switch (protocol){
            case 1:
                transport = new Tcp();
                break;
            case 2:
                transport = new Udp();
                break;
            case 3:
                transport = new Icmp();
                break;
            default:
                transport = new EmptyTransport();
                break;
        }
        return transport;
    }
}

    // какой-то главный метод:
    BaseTransport *transport = Factory::setTransport(protocol);
    transport.deserializeHeader(bytes, offset);
    if(transport.isHeaderEmpty())
    {
        delete transport;
        transport = new EmptyTransport();
    }
    List<string> s = transport.getHeaderData();
    // Вывод







